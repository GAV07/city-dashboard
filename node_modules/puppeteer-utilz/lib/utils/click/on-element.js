"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.onElement = exports.onElementWithRetries = void 0;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
var _ = require("..");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var onElement = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(component) {
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                _ctx.next = 2;
                return component.click();
            case 2:
            case "end":
                return _ctx.stop();
        }
    }, _callee);
}));
exports.onElement = onElement;
var onElementWithRetries = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee1(component, retries) {
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                _ctx.next = 2;
                return (0, _).retry(_asyncToGenerator(_regeneratorRuntime.default.mark(function _callee2() {
                    return _regeneratorRuntime.default.wrap(function _callee$1(_ctx1) {
                        while(1)switch(_ctx1.prev = _ctx1.next){
                            case 0:
                                _ctx1.prev = 0;
                                _ctx1.next = 3;
                                return component.click();
                            case 3:
                                _ctx1.next = 8;
                                break;
                            case 5:
                                _ctx1.prev = 5;
                                _ctx1.t0 = _ctx1["catch"](0);
                                throw new Error(_ctx1.t0);
                            case 8:
                            case "end":
                                return _ctx1.stop();
                        }
                    }, _callee2, null, [
                        [
                            0,
                            5
                        ]
                    ]);
                })), {
                    retries: retries
                });
            case 2:
            case "end":
                return _ctx.stop();
        }
    }, _callee1);
}));
exports.onElementWithRetries = onElementWithRetries;
