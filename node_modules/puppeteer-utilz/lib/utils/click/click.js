"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.click = void 0;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
var _onElement = require("./on-element");
var _onSelector = require("./on-selector");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var click = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(options) {
    var component, selector, retries;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                var ref;
                ref = options, component = ref.component, selector = ref.selector, retries = ref.retries, ref;
                if (!(typeof component.asElement === "function")) {
                    _ctx.next = 13;
                    break;
                }
                if (!retries) {
                    _ctx.next = 8;
                    break;
                }
                _ctx.next = 5;
                return (0, _onElement).onElementWithRetries(component, retries);
            case 5:
                return _ctx.abrupt("return", _ctx.sent);
            case 8:
                _ctx.next = 10;
                return (0, _onElement).onElement(component);
            case 10:
                return _ctx.abrupt("return", _ctx.sent);
            case 11:
                _ctx.next = 22;
                break;
            case 13:
                if (!retries) {
                    _ctx.next = 19;
                    break;
                }
                _ctx.next = 16;
                return (0, _onSelector).onSelectorWithRetries(component, selector, retries);
            case 16:
                return _ctx.abrupt("return", _ctx.sent);
            case 19:
                _ctx.next = 21;
                return (0, _onSelector).onSelector(component, selector);
            case 21:
                return _ctx.abrupt("return", _ctx.sent);
            case 22:
            case "end":
                return _ctx.stop();
        }
    }, _callee);
}));
exports.click = click;
