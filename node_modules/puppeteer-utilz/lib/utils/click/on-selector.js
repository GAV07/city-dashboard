"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.onSelectorWithRetries = exports.onSelector = void 0;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
var _chalk = _interopRequireDefault(require("chalk"));
var _noTry = require("no-try");
var _ = require("..");
var _internals = require("../../internals");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
        raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}
function _templateObject() {
    var data = _taggedTemplateLiteral([
        "{gray Waiting for the selector: \"",
        "\"}"
    ]);
    _templateObject = function _templateObject() {
        return data;
    };
    return data;
}
function _templateObject1() {
    var data = _taggedTemplateLiteral([
        "{gray Waiting for the selector: \"",
        "\"} {green [ok]}"
    ]);
    _templateObject1 = function _templateObject1() {
        return data;
    };
    return data;
}
function _templateObject2() {
    var data = _taggedTemplateLiteral([
        "Clicking the selector: {green \"",
        "\"}"
    ]);
    _templateObject2 = function _templateObject2() {
        return data;
    };
    return data;
}
function _templateObject3() {
    var data = _taggedTemplateLiteral([
        "{red Cannot click on the selector: \"",
        "\"}"
    ]);
    _templateObject3 = function _templateObject3() {
        return data;
    };
    return data;
}
function _templateObject4() {
    var data = _taggedTemplateLiteral([
        "Clicking the selector: {green \"",
        "\" [ok]}"
    ]);
    _templateObject4 = function _templateObject4() {
        return data;
    };
    return data;
}
var _getElement = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(component, selector) {
    var result;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                _internals.logger.debug((0, _chalk).default(_templateObject(), selector));
                _ctx.next = 3;
                return (0, _noTry).noTryAsync(function() {
                    return component.waitForSelector(selector);
                });
            case 3:
                var ref;
                ref = _ctx.sent, result = ref.result, ref;
                return _ctx.abrupt("return", result);
            case 5:
            case "end":
                return _ctx.stop();
        }
    }, _callee);
}));
var onSelector = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee1(component, selector) {
    var element, error;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                _ctx.next = 2;
                return _getElement(component, selector);
            case 2:
                element = _ctx.sent;
                if (element) {
                    _ctx.next = 8;
                    break;
                }
                _internals.logger.debug("Element specified by the selector: \"".concat(selector, "\", is not found in DOM"));
                return _ctx.abrupt("return", false);
            case 8:
                {
                    _internals.logger.debug((0, _chalk).default(_templateObject1(), selector));
                }
            case 9:
                _internals.logger.debug((0, _chalk).default(_templateObject2(), selector));
                _ctx.next = 12;
                return (0, _noTry).noTryAsync(function() {
                    return element.click();
                });
            case 12:
                var ref;
                ref = _ctx.sent, error = ref.error, ref;
                if (!error) {
                    _ctx.next = 18;
                    break;
                }
                _internals.logger.debug((0, _chalk).default(_templateObject3(), selector));
                return _ctx.abrupt("return", false);
            case 18:
                _internals.logger.debug((0, _chalk).default(_templateObject4(), selector));
                return _ctx.abrupt("return", true);
            case 20:
            case "end":
                return _ctx.stop();
        }
    }, _callee1);
}));
exports.onSelector = onSelector;
var onSelectorWithRetries = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee2(component, selector, retries) {
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                _ctx.next = 2;
                return (0, _).retry(_asyncToGenerator(_regeneratorRuntime.default.mark(function _callee3() {
                    return _regeneratorRuntime.default.wrap(function _callee$1(_ctx1) {
                        while(1)switch(_ctx1.prev = _ctx1.next){
                            case 0:
                                _ctx1.prev = 0;
                                _ctx1.next = 3;
                                return onSelector(component, selector);
                            case 3:
                                _ctx1.next = 8;
                                break;
                            case 5:
                                _ctx1.prev = 5;
                                _ctx1.t0 = _ctx1["catch"](0);
                                throw new Error(_ctx1.t0);
                            case 8:
                            case "end":
                                return _ctx1.stop();
                        }
                    }, _callee3, null, [
                        [
                            0,
                            5
                        ]
                    ]);
                })), {
                    retries: retries
                });
            case 2:
            case "end":
                return _ctx.stop();
        }
    }, _callee2);
}));
exports.onSelectorWithRetries = onSelectorWithRetries;
