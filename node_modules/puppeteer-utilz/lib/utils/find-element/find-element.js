"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.findElement = void 0;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var findElement = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(window, tagName, param, content) {
    var lookForIn = param === void 0 ? "textContent" : param;
    var params, el;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                params = {
                    tagName: tagName,
                    content: content,
                    lookForIn: lookForIn
                };
                _ctx.prev = 1;
                _ctx.next = 4;
                return window.evaluateHandle(function(args) {
                    var params1 = JSON.parse(args);
                    var _tags = document.getElementsByTagName(params1.tagName);
                    var _response = null;
                    for(var _i = 0; _i < _tags.length; _i += 1){
                        if (_tags[_i][params1.lookForIn].includes(params1.content)) {
                            _response = _tags[_i];
                        }
                    }
                    return _response;
                }, JSON.stringify(params));
            case 4:
                el = _ctx.sent;
                return _ctx.abrupt("return", el);
            case 8:
                _ctx.prev = 8;
                _ctx.t0 = _ctx["catch"](1);
                return _ctx.abrupt("return", _ctx.t0);
            case 11:
            case "end":
                return _ctx.stop();
        }
    }, _callee, null, [
        [
            1,
            8
        ]
    ]);
}));
exports.findElement = findElement;
