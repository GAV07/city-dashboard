"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.type = void 0;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
var _chalk = _interopRequireDefault(require("chalk"));
var _ = require("..");
var _internals = require("../../internals");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
        raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}
function _templateObject() {
    var data = _taggedTemplateLiteral([
        "Input name: {green ",
        "} | Value: {green ",
        "}"
    ]);
    _templateObject = function _templateObject() {
        return data;
    };
    return data;
}
var type = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(window, options) {
    var selector, value, name, censor;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                var ref;
                ref = options, selector = ref.selector, value = ref.value, name = ref.name, censor = ref.censor, ref;
                _ctx.next = 3;
                return (0, _).click({
                    component: window,
                    selector: selector
                });
            case 3:
                _internals.logger.debug((0, _chalk).default(_templateObject(), name, !censor ? value : "[CENSORED]"));
                _ctx.next = 6;
                return window.type(selector, value, {
                    delay: 111
                });
            case 6:
                return _ctx.abrupt("return", value);
            case 7:
            case "end":
                return _ctx.stop();
        }
    }, _callee);
}));
exports.type = type;
