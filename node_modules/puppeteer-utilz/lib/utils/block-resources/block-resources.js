"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.blockResources = void 0;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var defaultResources = [
    "stylesheet",
    "font",
    "image"
];
var blockResources = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(page, param) {
    var resources = param === void 0 ? defaultResources : param;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                _ctx.next = 2;
                return page.setRequestInterception(true);
            case 2:
                page.on("request", function(req) {
                    resources.forEach(function(resource, index) {
                        if (req.resourceType() === resource) {
                            req.abort();
                        }
                        if (index === resources.length - 1) {
                            req.continue();
                        }
                    });
                });
            case 3:
            case "end":
                return _ctx.stop();
        }
    }, _callee);
}));
exports.blockResources = blockResources;
