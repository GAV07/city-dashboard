"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.waitForURL = void 0;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
var _ = require("..");
var _internals = require("../../internals");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var waitForURL = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(page, expectedURL, timeout) {
    var URLsAreDifferent, hrStart, hrEnd, timeElapsed, currentURL;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                if (timeout) {
                    timeout = (0, _internals).time(timeout);
                } else {
                    timeout = Infinity;
                }
                URLsAreDifferent = true;
                ;
                ;
                timeElapsed = 0;
            case 5:
                if (!URLsAreDifferent) {
                    _ctx.next = 17;
                    break;
                }
                hrStart = process.hrtime();
                currentURL = page.url();
                if (currentURL === expectedURL) {
                    URLsAreDifferent = false;
                }
                _ctx.next = 11;
                return (0, _).delay(500);
            case 11:
                hrEnd = process.hrtime(hrStart)[1] / 1000000;
                timeElapsed += hrEnd;
                if (!(timeElapsed > timeout)) {
                    _ctx.next = 15;
                    break;
                }
                return _ctx.abrupt("return", false);
            case 15:
                _ctx.next = 5;
                break;
            case 17:
                return _ctx.abrupt("return", true);
            case 18:
            case "end":
                return _ctx.stop();
        }
    }, _callee);
}));
exports.waitForURL = waitForURL;
