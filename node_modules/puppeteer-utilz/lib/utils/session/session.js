"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.clearSession = exports.saveSession = exports.restoreSession = void 0;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
var fs = _interopRequireWildcard(require("fs"));
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
        for(var i = 0, arr2 = new Array(arr.length); i < arr.length; i++){
            arr2[i] = arr[i];
        }
        return arr2;
    }
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {
        };
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {
                    };
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}
var _page;
var writeCookies = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(page, p) {
    var client, cookies;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                _ctx.next = 2;
                return page.target().createCDPSession();
            case 2:
                client = _ctx.sent;
                _ctx.next = 5;
                return client.send("Network.getAllCookies");
            case 5:
                cookies = _ctx.sent["cookies"];
                fs.writeFileSync(p, JSON.stringify(cookies));
            case 7:
            case "end":
                return _ctx.stop();
        }
    }, _callee);
}));
var restoreCookies = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee1(page, p) {
    var buf, cookies;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                _ctx.prev = 0;
                buf = fs.readFileSync(p);
                cookies = JSON.parse(buf);
                _ctx.next = 5;
                return (_page = page).setCookie.apply(_page, _toConsumableArray(cookies));
            case 5:
                _ctx.next = 9;
                break;
            case 7:
                _ctx.prev = 7;
                _ctx.t0 = _ctx["catch"](0);
            case 9:
            case "end":
                return _ctx.stop();
        }
    }, _callee1, null, [
        [
            0,
            7
        ]
    ]);
}));
var writeLocalStorage = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee2(page, p) {
    var json;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                _ctx.next = 2;
                return page.evaluate(function() {
                    var json1 = {
                    };
                    for(var i = 0; i < localStorage.length; i++){
                        var key = localStorage.key(i);
                        json1[key] = localStorage.getItem(key);
                    }
                    return json1;
                });
            case 2:
                json = _ctx.sent;
                fs.writeFileSync(p, JSON.stringify(json));
            case 4:
            case "end":
                return _ctx.stop();
        }
    }, _callee2);
}));
var restoreLocalStorage = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee3(page, p) {
    var json;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                json = JSON.parse(fs.readFileSync(p));
                _ctx.next = 3;
                return page.evaluate(function(json1) {
                    localStorage.clear();
                    for(var key in json1)localStorage.setItem(key, json1[key]);
                }, json);
            case 3:
            case "end":
                return _ctx.stop();
        }
    }, _callee3);
}));
var writeSessionStorage = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee4(page, p) {
    var json;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                _ctx.next = 2;
                return page.evaluate(function() {
                    var json1 = {
                    };
                    for(var i = 0; i < sessionStorage.length; i++){
                        var key = sessionStorage.key(i);
                        json1[key] = sessionStorage.getItem(key);
                    }
                    return json1;
                });
            case 2:
                json = _ctx.sent;
                fs.writeFileSync(p, JSON.stringify(json));
            case 4:
            case "end":
                return _ctx.stop();
        }
    }, _callee4);
}));
var restoreSessionStorage = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee5(page, p) {
    var json;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                json = JSON.parse(fs.readFileSync(p));
                _ctx.next = 3;
                return page.evaluate(function(json1) {
                    sessionStorage.clear();
                    for(var key in json1)sessionStorage.setItem(key, json1[key]);
                }, json);
            case 3:
            case "end":
                return _ctx.stop();
        }
    }, _callee5);
}));
var removeFilesInPaths = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee6(param) {
    var paths = param === void 0 ? [] : param;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                try {
                    paths.forEach(function(p) {
                        fs.unlinkSync(p);
                    });
                } catch (err) {
                    console.error(err);
                }
            case 1:
            case "end":
                return _ctx.stop();
        }
    }, _callee6);
}));
var getDerivedSavedSessionPaths = function(path) {
    return {
        cookiesPath: "/tmp/".concat(path, "-cookies.txt"),
        localStoragePath: "/tmp/".concat(path, "-localstorage.json"),
        sessionStoragePath: "/tmp/".concat(path, "-sessionstorage.json")
    };
};
var saveSession = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee7(page, path) {
    var cookiesPath, localStoragePath, sessionStoragePath;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                var ref;
                ref = getDerivedSavedSessionPaths(path), cookiesPath = ref.cookiesPath, localStoragePath = ref.localStoragePath, sessionStoragePath = ref.sessionStoragePath, ref;
                _ctx.next = 3;
                return Promise.all([
                    writeCookies(page, cookiesPath),
                    writeLocalStorage(page, localStoragePath),
                    writeSessionStorage(page, sessionStoragePath), 
                ]);
            case 3:
            case "end":
                return _ctx.stop();
        }
    }, _callee7);
}));
exports.saveSession = saveSession;
var restoreSession = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee8(page, path) {
    var cookiesPath, localStoragePath, sessionStoragePath;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                var ref;
                ref = getDerivedSavedSessionPaths(path), cookiesPath = ref.cookiesPath, localStoragePath = ref.localStoragePath, sessionStoragePath = ref.sessionStoragePath, ref;
                _ctx.next = 3;
                return Promise.all([
                    restoreCookies(page, cookiesPath).catch(function() {
                    }),
                    restoreLocalStorage(page, localStoragePath).catch(function() {
                    }),
                    restoreSessionStorage(page, sessionStoragePath).catch(function() {
                    }), 
                ]);
            case 3:
            case "end":
                return _ctx.stop();
        }
    }, _callee8);
}));
exports.restoreSession = restoreSession;
var clearSession = function(path) {
    var ref = getDerivedSavedSessionPaths(path), cookiesPath = ref.cookiesPath, localStoragePath = ref.localStoragePath, sessionStoragePath = ref.sessionStoragePath;
    removeFilesInPaths([
        cookiesPath,
        localStoragePath,
        sessionStoragePath
    ]);
};
exports.clearSession = clearSession;
