"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.waitForFrame = void 0;
var _chalk = _interopRequireDefault(require("chalk"));
var _internals = require("../../internals");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
        raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}
function _templateObject() {
    var data = _taggedTemplateLiteral([
        "{gray Waiting for frame}"
    ]);
    _templateObject = function _templateObject() {
        return data;
    };
    return data;
}
function _templateObject1() {
    var data = _taggedTemplateLiteral([
        "{gray Waiting for frame} {green [ok]}"
    ]);
    _templateObject1 = function _templateObject1() {
        return data;
    };
    return data;
}
function _templateObject2() {
    var data = _taggedTemplateLiteral([
        "{gray Frame attached - retrying... Waiting for frame}"
    ]);
    _templateObject2 = function _templateObject2() {
        return data;
    };
    return data;
}
var waitForFrame = function(page, name) {
    return new Promise(function(resolve) {
        _internals.logger.debug((0, _chalk).default(_templateObject()));
        var _checkForFrame = function() {
            var frame = (0, _internals).findFrame(page.frames(), name);
            if (frame) {
                _internals.logger.debug((0, _chalk).default(_templateObject1()));
                resolve(frame);
            } else {
                _internals.logger.debug((0, _chalk).default(_templateObject2()));
                page.once("frameattached", _checkForFrame);
            }
        };
        _checkForFrame();
    });
};
exports.waitForFrame = waitForFrame;
