"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.capture = void 0;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var capture = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(page, options) {
    var padding, path, selector, rect;
    return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
        while(1)switch(_ctx.prev = _ctx.next){
            case 0:
                var ref;
                ref = options, padding = ref.padding, path = ref.path, selector = ref.selector, ref;
                _ctx.next = 3;
                return page.evaluate(function(selector1) {
                    var element = document.querySelector(selector1);
                    if (!element) {
                        return null;
                    }
                    var ref1 = element.getBoundingClientRect(), x = ref1.x, y = ref1.y, width = ref1.width, height = ref1.height;
                    return {
                        left: x,
                        top: y,
                        width: width,
                        height: height,
                        id: element.id
                    };
                }, selector);
            case 3:
                rect = _ctx.sent;
                if (rect) {
                    _ctx.next = 6;
                    break;
                }
                return _ctx.abrupt("return", null);
            case 6:
                _ctx.next = 8;
                return page.screenshot({
                    path: path,
                    clip: {
                        x: rect.left - padding,
                        y: rect.top - padding,
                        width: rect.width + padding * 2,
                        height: rect.height + padding * 2
                    }
                });
            case 8:
                return _ctx.abrupt("return", _ctx.sent);
            case 9:
            case "end":
                return _ctx.stop();
        }
    }, _callee);
}));
exports.capture = capture;
